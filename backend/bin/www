#!/usr/bin/env node

const https = require('https')
const fs = require('fs')
const path = require('path')
var appRoot = require('app-root-path')
// const serverCert = path.join(appRoot.path, '/key/server.cert')
// const serverKey = path.join(appRoot.path, '/key/server.key')

/* Module dependencies. */

const app = require('../app')
const debug = require('debug')('mampir-backend:server')
// const http = require('http')

// config variables
const config = require('../config/config.js')

fs.mkdir(appRoot.path + config.static_wisata, { recursive: true }, (err) => {
  if (err) throw err
})
fs.mkdir(appRoot.path + config.static_propinsi, { recursive: true }, (err) => {
  if (err) throw err
})
fs.mkdir(appRoot.path + config.static_kota, { recursive: true }, (err) => {
  if (err) throw err
})

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.app_port || '7997')
app.set('port', port)

// console.log("TCL: path.join(appRoot.path, '/key/server.key')", path.join(appRoot.path, '/key/server.key'))
/**
 * Create HTTP server.
 */

// const server = http.createServer(app)

/**
 * Create HTTPS server.
 */

var options = {
  key: fs.readFileSync(path.join(appRoot.path, '/key/mockserver.key')),
  cert: fs.readFileSync(path.join(appRoot.path, '/key/mockserver.crt'))
}

const server = https.createServer(options, app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
// server.on('error', onError)
// server.on('listening', onListening)

// app.listen(port, () => {
//   console.log(`run on port ${port}`)
// })

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)
  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
